Quelques exemples
=================

note : la command ls utilisée est un alias :
   $ alias ls
   alias ls='ls --time-style=long-iso -CF --color'
C'est l'option "--time-style=long-iso" qui a une influence sur les affichages
de ce document.


1) liens symboliques
   =================

Lien symbolique : principe du raccourci sous Windows (ou plus exactement
et chronologiquement, le raccourci de Windows s"inspire du lien
symbolique d'UNIX).

création d'un fichier classique
$ gedit origine
$ ls -lG
-rw-r--r-- 1 subrenat 14 2024-08-16 14:51 origine
$ cat origine 
Hello monde !

création d'un lien symbolique sur le fichier "origine"
$ ln -s origine liensymb
$ ls -lG
lrwxrwxrwx 1 subrenat  7 2024-08-16 14:46 liensymb -> origine
-rw-r--r-- 1 subrenat 14 2024-08-16 14:51 origine
$ cat liensymb 
Hello monde !

Deux noms pour accéder au même fichier :
$ echo "Bye Bye" >> liensymb 
$ cat origine 
Hello monde !
Bye Bye

Supprimer le lien laisse intact le fichier d'origine (heureusement)

Suprimer le fichier d'origine rend le lien incohérent (sorte d'erreur 404)
$ rm origine
$ ls -lG
lrwxrwxrwx 1 subrenat  7 2024-08-16 14:46 liensymb -> origine
$ cat liensymb 
cat: liensymb: Aucun fichier ou dossier de ce type

Note : un lien symbolique peut :
- désigner un répertoire
- désigner une entité sur une autre partition
- désigner un fichier/répertoire ailleurs sur le disque (cas le plus fréquent)



2) liens durs (hard link)
   ======================

hard link : permet de donner plusieurs noms à un fichier et il n'y a pas
de différence entre le fichier origine et le lien (il n'y a aucun
moyen de savoir qui est l'origine et qui est le lien)
ged
Analogie de la pièce :
- au départ : une pièce avec une porte et un numéro dessus (le nom d'origine)
- le lien dur revient a mettre une deuxième porte avec un autre numéro
=> deux numéros pour la même pièce
=> aucune différence entre les deux portes
=> on ne sait pas quelle était la porte d'origine
=> condamner (effacer) une porte n'empêche pas d'accéder à la pièce par
   l'autre porte

création d'un fichier classique
$ gedit origine
$ ls -lG
-rw-r--r-- 1 subrenat 12 2024-08-16 14:55 origine
$ cat origine 
Hallo welt!

Création d'un lien dur sur origine (en restant dans le même répertoire)
$ ln origine liendur
$ ls -lG
-rw-r--r-- 2 subrenat 12 2024-08-16 14:55 liendur
-rw-r--r-- 2 subrenat 12 2024-08-16 14:55 origine
On remarque le "2" à gauche du nom du propriétaire : on en déduit
que "origine" et "liendur" ont chacun deux noms, mais on ne peut
savoir a priori si tous les deux sont liés.

"origine" et "liendur" sont-ils le même fichier ?
$ ls -ilG
1313072 -rw-r--r-- 2 subrenat 12 2024-08-16 14:55 liendur
1313072 -rw-r--r-- 2 subrenat 12 2024-08-16 14:55 origine
On affiche l'identifiant système des fichiers (inode) et on s'aperçoit
que "origine" et "liendur" ont le même, ce sont donc physiquement
les mêmes fichiers.

Deux noms pour accéder au même fichier :
$ echo "Tchüss" >> liendur 
$ cat origine 
Hallo welt!
Tchüss

Pour supprimer un fichier, il faut supprimer tous ses noms
$ rm origine 
$ ls -lG
-rw-r--r-- 1 subrenat 20 2024-08-16 14:58 liendur
# le "2" s'est changé en "1"
$ cat liendur 
Hallo welt!
Tchüss

Note :
- le "lien" n'est pas obligatoirement dans le même répertoire que l'origine
- un lien dur ne peut pas désigner un répertoire
- un lien dur ne peut pas désigner une entité d'une autre partition
$ ln /bin/a2ps liendur
ln: impossible de créer le lien direct 'liendur' → '/bin/a2ps': Lien physique inter-périphérique invalide




3) mkdir
   =====

Que fait cette commande :
$ mkdir /tmp/toto/tutu/titi
?

Et cette commande :
$ mkdir -p /tmp/toto/tutu/titi
?

Réponse 1 : échec car le répertoire /tmp/toto/tutu n'existe pas
Réponse 2 : ok car les répertoires intermédiaires sont créés si nécessaire



4) chmod
   =====

Quelques remarques

"w" pour un fichier indique si on a le droit ou non de le modifier.
Attention cela ne concerne pas le droit d'effacer ou non le fichier : pour
cela c'est l'attribut "w" du répertoire.

Cas 1
$ ls -alG
drwxr-xr-x 2 subrenat 4096 2024-08-16 21:39 ./
drwxr-xr-x 3 subrenat 4096 2024-08-16 21:39 ../
-r--r--r-- 1 subrenat    3 2024-08-16 21:39 fichier
# on ne peut pas modifier le fichier (pas de "w" pour le fichier)
$ echo "bonjour" > fichier 
bash: fichier: Permission non accordée
# mais on peut le supprimer (un "w" pour le répertoire)
$ rm fichier 
rm : supprimer 'fichier' qui est protégé en écriture et est du type « fichier » ? y
$ ls -alG
total 8
drwxr-xr-x 2 subrenat 4096 2024-08-16 21:41 ./
drwxr-xr-x 3 subrenat 4096 2024-08-16 21:39 ../

Cas 2
$ ls -alG
dr-xr-xr-x 2 subrenat 4096 2024-08-16 21:47 ./
drwxr-xr-x 3 subrenat 4096 2024-08-16 21:39 ../
-rw-r--r-- 1 subrenat    3 2024-08-16 21:47 fichier
# on ne peut pas effacer le fichier (pas de "w" pour le répertoire)
$ rm fichier 
rm: impossible de supprimer 'fichier': Permission non accordée
# mais on peut le modfier
$ echo "aa" >> fichier 


Un "x" pour un répertoire signifie qu'on a le droit de le
traverser, c'est à dire d'aller dans ses sous-répertoires.


le "setuid" bit permet d'exécuter un exécutable avec les droits de son
propriétaire au lieu de celui qui le lance.
Le système peut interdire le setuid bit car c'est une faille de sécurité
potentielle, sinon à manipuler avec précaution.
